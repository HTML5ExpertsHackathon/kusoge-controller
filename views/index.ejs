<!DOCTYPE HTML>
<html lang="en">
<head>
    <title>PeerJS chat demo</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="Content-Language" content="en-us">

    <script type="text/javascript" src="/javascripts/jquery-1.9.1.min.js"></script>
    <script type="text/javascript" src="/javascripts/peer.0.3.7.min.js"></script>

    <script>
      // for sctp version mismatching, configuration below is safe in current state.
      util.supports.sctp = false;

        // Connect to PeerJS, have server assign an ID instead of providing one
        // Showing off some of the configs available with PeerJS :).
        var peerjsLauncher = function(host, port, key){

            var peer = new Peer({
                host: host,
                port: port,
                key: key,
                'config':{'iceServers': [
                    {'url': "stun:stun.l.google.com:19302"},
                    {'url': 'turn:153.149.7.185:443?transport=tcp', 'username': 'iac', 'credential': 'webcore'}
                ]},
                secure: false,
                debug: 3,
                logFunction: function() {
                }
            });

            var connectedPeers = {};

            // Show this peer's ID.
            peer.on('open', function(id){
                console.log('My ID is ' +id);
            });

            // Await connections from others
            peer.on('connection', connect);

            // Handle a connection object.
            function connect(c) {
                // Handle a chat connection.
                if (c.label === 'chat') {
                    var chatbox = $('<div></div>').addClass('connection').addClass('active').attr('id', c.peer);
                    var header = $('<h1></h1>').html('Chat with <strong>' + c.peer + '</strong>');
                    var messages = $('<div><em>Peer connected.</em></div>').addClass('messages');
                    chatbox.append(header);
                    chatbox.append(messages);

                    // Select connection handler.
                    chatbox.on('click', function() {
                        if ($(this).attr('class').indexOf('active') === -1) {
                            $(this).addClass('active');
                        } else {
                            $(this).removeClass('active');
                        }
                    });
                    $('.filler').hide();
                    $('#connections').append(chatbox);

                    c.on('data', function(data) {
                        messages.append('<div><span class="peer">' + c.peer + '</span>: ' + data +
                                '</div>');
                    });
                    c.on('close', function() {
                        alert(c.peer + ' has left the chat.');
                        chatbox.remove();
                        if ($('.connection').length === 0) {
                            $('.filler').show();
                        }
                        delete connectedPeers[c.peer];
                    });
                } 
            }


            $(document).ready(function() {
                // Prepare file drop box.
                var box = $('#box');
                box.on('dragenter', doNothing);
                box.on('dragover', doNothing);
                box.on('drop', function(e){
                    e.originalEvent.preventDefault();
                    var file = e.originalEvent.dataTransfer.files[0];
                    eachActiveConnection(function(c, $c) {
                        if (c.label === 'file') {
                            c.send(file);
                            $c.find('.messages').append('<div><span class="file">You sent a file.</span></div>');
                        }
                    });
                });
                function doNothing(e){
                    e.preventDefault();
                    e.stopPropagation();
                }



                // Connect to a peer
                $('#connect').click(function() {
                    requestedPeer = $('#rid').val();
                    requestedPeer = 'kusoge-server';

                    if (!connectedPeers[requestedPeer]) {
                        // Create 2 connections, one labelled chat and another labelled file.
                        var c = peer.connect(requestedPeer, {
                            label: 'chat',
                            serialization: 'none',
                            metadata: {message: 'hi i want to chat with you!'}
                        });
                        c.on('open', function() {
                            connect(c);
                        });
                        c.on('error', function(err) { alert(err); });
                        var f = peer.connect(requestedPeer, { label: 'file', reliable: true });
                        f.on('open', function() {
                            connect(f);
                        });
                        f.on('error', function(err) { alert(err); });
                    }
                    connectedPeers[requestedPeer] = 1;
                });

                // Close a connection.
                $('#close').click(function() {
                    eachActiveConnection(function(c) {
                        c.close();
                    });
                });



                $(document).on('click', "#jump", function(e){
                    send_message('jump');
                    
                })

                $(document).on('click', "#fire", function(e){
                    send_message('fire');
                })

                function send_message(msg){

                    console.log(msg)

                    eachActiveConnection(function(c, $c) {
                        if (c.label === 'chat') {
                            c.send(msg);
                            $c.find('.messages').append('<div><span class="you">You: </span>' + msg
                                    + '</div>');
                        }
                    });
                    $('#text').val('');
                    $('#text').focus();
                };


                // Send a chat message to all active connections.
                $('#send').submit(function(e) {
                    e.preventDefault();
                    // For each active connection, send the message.

                    var msg = $('#text').val();
                    send_message(msg);

                    $('#text').val('');
                    $('#text').focus();
                });

                // Goes through each active peer and calls FN on its connections.
                function eachActiveConnection(fn) {
                    var actives = $('.active');
                    var checkedIds = {};
                    actives.each(function() {
                        var peerId = $(this).attr('id');

                        if (!checkedIds[peerId]) {
                            var conns = peer.connections[peerId];
                            for (var i = 0, ii = conns.length; i < ii; i += 1) {
                                var conn = conns[i];
                                fn(conn, $(this));
                            }
                        }

                        checkedIds[peerId] = 1;
                    });
                }

            });

        };


        window.onunload = window.onbeforeunload = function(e) {
            if (!!peer && !peer.destroyed) {
                peer.destroy();
            }
        };


        window.onload = function() {


            var address = "peerserver.skyway.io";
            var port = "9000";
            var key = 'sacdj23r2fjx7q93f';

            peerjsLauncher(address, port, key);


        };


    </script>
</head>

<body>

<h1>コントローラ</h1>


<div id="actions">
    <button class="button" type="button" value="Connect" id="connect">Connect to Controller Server</button><br><br>

    <form id="send">
        <input type="text" id="text" placeholder="Enter message"><input class="button" type="submit" value="Send">
    </form>
    <button id="fire">Fire!</button>
    <button id="jump">Jump!</button>
</div>

<div id="wrap"><div id="connections">
</div>
    <div class="clear"></div></div>


</body>
</html> 
